<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="csrf-token" content="<%= form_authenticity_token %>">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Grade Horários</title>
  <!-- FullCalendar CSS -->

  <link href="https://unpkg.com/fullcalendar@6.1.8/main.min.css" rel="stylesheet">
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
    }
    .container {
      display: flex;
      gap: 20px;
    }
    .grades-curriculares,
    .notifications {
      width: 20%;
      background-color: #f9f9f9;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    .main-content {
      width: 60%;
    }
    .draggable-list {
      list-style: none;
      padding: 0;
    }
    .draggable {
      padding: 8px;
      margin-bottom: 5px;
      background-color: #e1f5fe;
      border: 1px solid #81d4fa;
      border-radius: 4px;
      cursor: grab;
      touch-action: none;
    }
    /* Modal Styles */
    #modal-overlay {
      display: none;
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 500;
    }
    #event-modal {
      display: none;
      position: fixed;
      top: 50%; left: 50%;
      transform: translate(-50%, -50%);
      background: #fff;
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 4px;
      z-index: 1000;
      width: 300px;
    }
    #calendar {
      max-width: 100%;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Left column: Grades Curriculares list (for reference) -->
    <div class="grades-curriculares">
      <h3>Grades Curriculares</h3>
      <ul id="grades-list" class="draggable-list"></ul>
    </div>
    
    <!-- Main column: The FullCalendar scheduling interface -->
    <div class="main-content">
      <div id="calendar"></div>
    </div>
    
    <!-- Right column: Notifications -->
    <div class="notifications">
      <h3>Notificações</h3>
      <ul id="notifications-list"></ul>
    </div>
  </div>
  
  <!-- Modal for creating a new aula -->
  <div id="modal-overlay"></div>
  <div id="event-modal">
    <h3>Criar Aula</h3>
    <div>
      <label for="grade-select">Grade Curricular:</label>
      <select id="grade-select"></select>
    </div>
    <br>
    <div>
      <label for="ambiente-select">Ambiente:</label>
      <select id="ambiente-select"></select>
    </div>
    <br>
    <button id="save-event">Salvar</button>
    <button id="cancel-event">Cancelar</button>
  </div>
  
  <!-- Include FullCalendar and its interaction plugin -->
  <script src="/layout/assets/js/vendor/ui/fullcalendar/main.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@fullcalendar/interaction/main.global.min.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      // Reference elements
      const gradesList = document.getElementById("grades-list");
      const notificationsList = document.getElementById("notifications-list");
      const gradeSelect = document.getElementById("grade-select");
      const ambienteSelect = document.getElementById("ambiente-select");
      const eventModal = document.getElementById("event-modal");
      const modalOverlay = document.getElementById("modal-overlay");
      let currentEventStart = null; // To store the clicked time slot
      
      // Helper: Display notifications on the page.
      function addNotification(message, type = "success") {
        const li = document.createElement("li");
        li.textContent = message;
        li.className = type;
        notificationsList.appendChild(li);
      }
      
      // --- Sample Data Setup ---
      
      // Grades Curriculares (from your backend or hard-coded for now)
      const grades_curriculares = [
        { id: 1, nome: "Matemática", carga_horaria: 60 },
        { id: 2, nome: "Português", carga_horaria: 60 },
        { id: 3, nome: "História", carga_horaria: 45 },
        { id: 4, nome: "Geografia", carga_horaria: 45 },
        { id: 5, nome: "Ciências", carga_horaria: 60 },
      ];
      
      // Populate the left-side Grades list (for reference)
      grades_curriculares.forEach((grade) => {
        const li = document.createElement("li");
        li.className = "draggable";
        li.setAttribute("data-id", grade.id);
        li.setAttribute("data-type", "grade");
        li.textContent = `${grade.nome} - ${grade.carga_horaria}h`;
        gradesList.appendChild(li);
      });
      
      // Populate the modal dropdown for grades.
      grades_curriculares.forEach((grade) => {
        const option = document.createElement("option");
        option.value = grade.id;
        option.textContent = `${grade.nome} - ${grade.carga_horaria}h`;
        gradeSelect.appendChild(option);
      });
      
      // Ambientes (assumed to be passed from your backend)
      var ambientesRaw = '<%= raw(json_escape(@ambientes.html_safe)) %>';
      const ambientes = JSON.parse(ambientesRaw);
      
      // Populate the modal dropdown for ambientes.
      ambientes.forEach((ambiente) => {
        const option = document.createElement("option");
        option.value = ambiente.id;
        option.textContent = ambiente.descricao;
        ambienteSelect.appendChild(option);
      });
      
      // Helper: Calculate end time (here, assuming a 1‑hour duration).
      function calcularHorarioFim(horarioInicio) {
        const date = new Date(horarioInicio);
        date.setHours(date.getHours() + 1);
        return date;
      }
      
      // --- Initialize FullCalendar ---
      const calendarEl = document.getElementById("calendar");
      const calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'timeGridWeek',
        selectable: true,
        editable: true,
        headerToolbar: {
          left: 'prev,next today',
          center: 'title',
          right: 'timeGridWeek,timeGridDay'
        },
        // When a user clicks on a time slot…
        dateClick: function(info) {
          currentEventStart = info.date;
          openEventModal();
        },
        // (Optional) You can also allow event dragging/resizing and then update via AJAX.
      });
      calendar.render();
      
      // --- Modal Functions ---
      function openEventModal() {
        modalOverlay.style.display = "block";
        eventModal.style.display = "block";
      }
      function closeEventModal() {
        modalOverlay.style.display = "none";
        eventModal.style.display = "none";
      }
      
      // --- Modal Button Handlers ---
      document.getElementById("save-event").addEventListener("click", () => {
        const gradeId = gradeSelect.value;
        const ambienteId = ambienteSelect.value;
        const gradeText = gradeSelect.options[gradeSelect.selectedIndex].text;
        const ambienteText = ambienteSelect.options[ambienteSelect.selectedIndex].text;
        
        // Compute start and end times for the new event
        const start = currentEventStart;
        const end = calcularHorarioFim(start);
        
        // Add the new event to FullCalendar
        calendar.addEvent({
          title: `${gradeText} / ${ambienteText}`,
          start: start,
          end: end
        });
        
        // Prepare the data to save (adjust the format as needed)
        const data = {
          aula: {
            grade_curricular_id: gradeId,
            ambiente_id: ambienteId,
            dia: start.toISOString().split('T')[0],
            // Format the times as HH:MM – adjust if needed.
            horario_inicio: start.toTimeString().split(' ')[0].substring(0, 5),
            horario_fim: end.toTimeString().split(' ')[0].substring(0, 5)
          },
        };
        
        // Send the new "aula" to your server via fetch/AJAX.
        fetch("/aulas", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
          },
          body: JSON.stringify(data),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Erro ao salvar a aula");
            }
            return response.json();
          })
          .then((result) => {
            addNotification(`Aula adicionada: ${gradeText} em ${ambienteText} no dia ${data.aula.dia} às ${data.aula.horario_inicio}`);
          })
          .catch((error) => {
            addNotification("Erro ao salvar a aula. Tente novamente.", "error");
            console.error(error);
          });
        
        closeEventModal();
      });
      
      document.getElementById("cancel-event").addEventListener("click", () => {
        closeEventModal();
      });
      
    });
  </script>
</body>
</html>
