<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <title>Calendário Escolar</title>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }

        .container {
            max-width: 1600px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
        }

        .schedule-container {
            display: flex;
            margin-top: 20px;
            gap: 20px;
        }

        .subjects-list, .teachers-list {
            width: 200px;
            padding: 15px;
            background-color: #fff;
            border-radius: 8px;
            border: 1px solid #eee;
        }

        .subject-card, .teacher-card {
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 4px;
            cursor: move;
            text-align: center;
        }

        .subject-card p, .teacher-card p {
            margin: 2px 0;
            font-size: 14px;
        }

        .schedule {
            flex-grow: 1;
            border-collapse: collapse;
            background: white;
        }

        .schedule th, .schedule td {
            border: 1px solid #ddd;
            padding: 4px;
            text-align: center;
        }

        .schedule thead {
            background-color: #f8f9fa;
        }

        .schedule th:first-child, .schedule td:first-child {
            background-color: #f8f9fa;
            font-weight: bold;
            width: 120px;
        }

        .schedule td {
            height: 40px !important; /* Garante que a altura seja aplicada */
            padding: 4px !important; /* Reduz espaçamento interno */
            vertical-align: middle;
        }

        .time-slot {
            min-height: 80px;
            border-radius: 4px;
            transition: background-color 0.2s;
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .time-slot:empty {
            border: 2px dashed #ddd;
        }

        .time-slot:not(:empty) {
            border: none;
        }

        .select2-container {
            margin-bottom: 20px;
        }

        .subject-card[data-subject="matematica"] { background-color: #ffcdd2; }
        .subject-card[data-subject="portugues"] { background-color: #c8e6c9; }
        .subject-card[data-subject="historia"] { background-color: #bbdefb; }
        .subject-card[data-subject="geografia"] { background-color: #fff9c4; }

        .teacher-card {
            background-color: #e3f2fd;
        }

        .search-container {
            margin-bottom: 22px;
            display: flex;
            align-items: center;
            background: #fff;
            border-radius: 8px;
            padding: 5px 10px;
            box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
        }

        .search-container input {
            border: none;
            outline: none;
            padding: 8px 12px;
            border-radius: 6px;
            width: 100%;
            font-size: 14px;
        }

        .search-container i {
            margin-right: 8px;
            color: #999;
        }

        .search-container img {
            width: 20px;
            height: 20px;
            margin-right: 8px;
        }

        .info-text {
            font-size: 12px;
            color: #666;
            text-align: center;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <select id="turma-select" style="width: 100%; max-width: 250px;">
        </select>

        <div style="background-color: #f8d7da; color: #363636; padding: 12px; margin: 15px 0; border: 1px solid #f5c2c7; border-radius: 4px; text-align: center; font-weight: bold;">
            Dê dois cliques para remover itens do calendário
        </div>

        <div class="schedule-container">
            <div id="subjects-list" class="subjects-list">
                <h3 style="text-align: center;">Matérias</h3>
                <div class="search-container">
                    <input type="text" id="subject-search" placeholder="Pesquisar matéria...">
                    <img src="img\search.png" alt="Lupa">
                </div>
                <!-- <div class="info-text">Dê dois cliques para remover a matéria.</div> -->
            </div>

            <table id="schedule" class="schedule">
                <thead></thead>
                <tbody></tbody>
            </table>

            <div id="teachers-list" class="teachers-list">
                <h3 style="text-align: center;">Professores</h3>
                <div class="search-container">
                    <input type="text" id="teacher-search" placeholder="Pesquisar professor...">
                    <img src="img\search.png" alt="Lupa">
                </div>
                <!-- <div class="info-text">Dê dois cliques para remover o professor.</div> -->
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    <script>
        $(document).ready(function() {
            function createTurmaOptions() {
              const turmaSelect = $('#turma-select');
              // Clear any existing options and add the default one.
              turmaSelect.empty();
              turmaSelect.append($('<option>', { value: '', text: 'Selecione uma turma' }));

              // Create an object to store distinct turmas.
              let turmas = {};

              // Loop through subjects to gather distinct turma objects.
              subjects.forEach(subject => {
                // Use the turma_id as key. 
                // Assuming each subject has a `turma` object with a `descricao` property.
                const turmaId = subject.turma_id;
                if (!turmas[turmaId]) {
                  turmas[turmaId] = subject.turma.descricao;
                }
              });

              // Append an option for each distinct turma.
              for (let id in turmas) {
                turmaSelect.append($('<option>', { value: id, text: turmas[id] }));
              }
            }

            var subjects = JSON.parse('<%= raw(json_escape(@grades_curriculares)) %>');
            console.log(subjects);

            createTurmaOptions();
            $('#turma-select').select2();


            var teachers = JSON.parse('<%= raw(json_escape(@professores)) %>');
            console.log(teachers);
            
            function createSubjectCards() {
                const subjectsList = document.getElementById('subjects-list');
                subjects.forEach(subject => {
                    const maxUses = Math.floor(subject.weeklyminutes / 50);
                    const card = document.createElement('div');
                    card.className = 'subject-card';
                    card.setAttribute('data-id', subject.id);
                    // Save the turma id so you can filter by it.
                    card.setAttribute('data-turma-id', subject.turma_id);
                    card.setAttribute('data-ambiente-id', subject.room_id);
                    card.innerHTML = `
                        <p><strong>${subject.name}</strong></p>
                        <p>${subject.room}</p>
                        <p>Aula 0/${maxUses}</p>
                    `;
                    subjectsList.appendChild(card);
                });
            }


            function createTeacherCards() {
                const teachersList = document.getElementById('teachers-list');
                teachers.forEach(teacher => {
                    const maxUses = Math.floor(teacher.weeklyminutes / 50);
                    const card = document.createElement('div');
                    card.className = 'teacher-card';
                    card.setAttribute('data-id', teacher.id);
                    card.setAttribute('data-max-uses', maxUses);
                    card.setAttribute('data-current-uses', '0');
                    card.innerHTML = `
                        <p><strong>${teacher.name}</strong></p>
                        <p>Aula 0/${maxUses}</p>
                    `;
                    teachersList.appendChild(card);
                });
            }

            function createScheduleTable() {
              const timeSlots = JSON.parse('<%= raw(json_escape(@horarios)) %>');
              const daysOfWeek = JSON.parse('<%= raw(json_escape(@dias)) %>');
              const table = document.getElementById('schedule');

              // Build the table header dynamically.
              const thead = table.querySelector('thead');
              thead.innerHTML = ''; // Clear existing content.
              const headerRow = document.createElement('tr');

              const timeHeaderCell = document.createElement('th');
              timeHeaderCell.textContent = 'Horário';
              headerRow.appendChild(timeHeaderCell);

              const sortedDayKeys = Object.keys(daysOfWeek).sort((a, b) => parseInt(a) - parseInt(b));
              sortedDayKeys.forEach(key => {
                const dayHeaderCell = document.createElement('th');
                dayHeaderCell.textContent = daysOfWeek[key];
                headerRow.appendChild(dayHeaderCell);
              });
              thead.appendChild(headerRow);

              // Build the table body.
              const tbody = table.querySelector('tbody');
              tbody.innerHTML = '';

              timeSlots.forEach(timeSlot => {
                const row = document.createElement('tr');

                // Time slot cell
                const timeCell = document.createElement('td');
                timeCell.textContent = timeSlot;
                row.appendChild(timeCell);

                // Create a cell for each day.
                sortedDayKeys.forEach(key => {
                  const cell = document.createElement('td');
                  // Create an inner div that will be made sortable.
                  const slotDiv = document.createElement('div');
                  slotDiv.className = 'time-slot';
                  // Save schedule info in the slot (adjust as needed)
                  slotDiv.setAttribute('data-day', key); // day number or code
                  slotDiv.setAttribute('data-horario-inicio', timeSlot);
                  // For demonstration, we set horario_fim equal to horario_inicio
                  // You can calculate the end time if needed.
                  slotDiv.setAttribute('data-horario-fim', timeSlot);
                  cell.appendChild(slotDiv);
                  row.appendChild(cell);
                });
                tbody.appendChild(row);
              });
            }


            function initializeSortable() {
              // Sortable for subjects
              new Sortable(document.getElementById('subjects-list'), {
                group: { name: 'subjects', pull: 'clone', put: false },
                sort: false,
                animation: 150
              });

              // Sortable for teachers
              new Sortable(document.getElementById('teachers-list'), {
                group: { name: 'teachers', pull: 'clone', put: false },
                sort: false,
                animation: 150
              });

              // Sortable for the schedule cells
              document.querySelectorAll('.time-slot').forEach(timeSlot => {
                new Sortable(timeSlot, {
                  group: {
                    name: 'shared',
                    put: function(to, from, item) {
                      // Allow only one subject and one teacher per cell
                      const hasSubject = Array.from(to.el.children).some(child => 
                        child !== item && child.classList.contains('subject-card')
                      );
                      const hasTeacher = Array.from(to.el.children).some(child => 
                        child !== item && child.classList.contains('teacher-card')
                      );
                      if (item.classList.contains('subject-card') && hasSubject) return false;
                      if (item.classList.contains('teacher-card') && hasTeacher) return false;
                      return true;
                    }
                  },
                  animation: 150,
                  onAdd: function(evt) {
                    const item = evt.item;
                    // Existing code to handle clones and update counts...
                    if (!evt.from.classList.contains('time-slot')) {
                        const originalId = item.getAttribute('data-id');
                        const maxUses = parseInt(item.getAttribute('data-max-uses'));
                                
                                // Find the original card in the list
                        const originalCard = item.classList.contains('subject-card') 
                            ? document.querySelector(`.subjects-list .subject-card[data-id="${originalId}"]`)
                            : document.querySelector(`.teachers-list .teacher-card[data-id="${originalId}"]`);
                        
                        if (originalCard) {
                            const currentUses = parseInt(originalCard.getAttribute('data-current-uses'));
                                    
                        if (currentUses >= maxUses) {
                            evt.from.appendChild(item);
                            alert('Limite máximo de alocações atingido para este item!');
                            return;
                        }
                        // Update the count on the original card
                        const newUses = currentUses + 1;
                        originalCard.setAttribute('data-current-uses', newUses);
                        const countText = originalCard.querySelector('p:last-child');
                        countText.textContent = `Aula ${newUses}/${maxUses}`;

                        // Create a clone for the schedule
                        const clone = item.cloneNode(true);
                        clone.setAttribute('data-instance-number', newUses);
                        const cloneCountText = clone.querySelector('p:last-child');
                        cloneCountText.textContent = `Aula ${newUses}/${maxUses}`;
                        evt.to.replaceChild(clone, item);
                        evt.from.appendChild(originalCard);

                        // Hide the original card if max uses reached
                        if (newUses >= maxUses) {
                            originalCard.style.display = 'none';
                        }

                                    // Add double-click handler to remove
                        clone.addEventListener('dblclick', function() {
                            if (confirm('Deseja remover este item?')) {
                                // Find the original card
                                const originalCard = item.classList.contains('subject-card') 
                                    ? document.querySelector(`.subjects-list .subject-card[data-id="${originalId}"]`)
                                    : document.querySelector(`.teachers-list .teacher-card[data-id="${originalId}"]`);

                                if (originalCard) {
                                    // Decrement the count by 1
                                    const currentUses = parseInt(originalCard.getAttribute('data-current-uses'));
                                    const newUses = currentUses - 1;
                                    originalCard.setAttribute('data-current-uses', newUses);
                                    const maxUses = parseInt(originalCard.getAttribute('data-max-uses'));
                                    const countText = originalCard.querySelector('p:last-child');
                                    countText.textContent = `Aula ${newUses}/${maxUses}`;
                                                
                                    // Show the original card if it was hidden
                                    if (originalCard.style.display === 'none') {
                                        originalCard.style.display = 'block';
                                    }
                                }
                                            
                                            // Remove only this instance
                                clone.remove();
                            }
                                    });
                        }
                    } else {
                      const originalHandler = item.ondblclick;
                      if (originalHandler) {
                        item.ondblclick = originalHandler;
                      }
                    }

                    // -------------
                    // *** AJAX CALL ***
                    // -------------
                    // Get schedule info from the time-slot container (evt.to.el)
                    const slotEl = evt.to;
                    const dia = slotEl.getAttribute('data-day');
                    const horarioInicio = slotEl.getAttribute('data-horario-inicio');
                    const horarioFim = slotEl.getAttribute('data-horario-fim');

                    // Find what cards are in the cell (there should be at most one teacher and one subject)
                    const teacherCard = slotEl.querySelector('.teacher-card');
                    const subjectCard = slotEl.querySelector('.subject-card');
                    console.log(subjectCard);
                    // Build the parameters object.
                    let params = {
                      dia: dia,
                      horario_inicio: horarioInicio,
                      horario_fim: horarioFim,
                    };

                    if (subjectCard) {
                      // Assuming subject card's data-id is the grade_curricular_id
                      params.grade_curricular_id = subjectCard.getAttribute('data-id');
                      // If you have ambiente_id (e.g., from subject.ambiente_id), include it here.
                      params.ambiente_id = subjectCard.getAttribute('data-ambiente-id') || null;
                    }

                    if (teacherCard) {
                      // Teacher card's data-id is used as user_id.
                      params.user_id = teacherCard.getAttribute('data-id');
                    }

                    // Check if this cell already has an aula (stored as a data attribute)
                    const aulaId = slotEl.getAttribute('data-aula-id');

                    if (aulaId) {
                      // A record exists – update it via PATCH
                      $.ajax({
                        url: `/aula/${aulaId}`,
                        headers: {'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')},
                        method: 'PATCH',
                        data: { aula: params },
                        success: function(response) {
                          console.log('Aula updated:', response);
                        },
                        error: function(error) {
                          console.error('Error updating aula:', error);
                        }
                      });
                    } else {
                      // No record yet – create a new aula via POST
                      $.ajax({
                        url: '/aulas',
                        headers: {'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')},
                        method: 'POST',
                        data: { aula: params },
                        success: function(response) {
                          console.log('Aula created:', response);
                          // Store the returned aula id on the slot for future updates.
                          slotEl.setAttribute('data-aula-id', response.id);
                        },
                        error: function(error) {
                          console.error('Error creating aula:', error);
                        }
                      });
                    }
                  }
                });
              });
            }

            // Função para filtrar matérias
            document.getElementById('subject-search').addEventListener('input', function(e) {
                const searchTerm = e.target.value.toLowerCase();
                const cards = document.querySelectorAll('#subjects-list .subject-card');
                cards.forEach(card => {
                    const subjectName = card.querySelector('p').textContent.toLowerCase();
                    if (subjectName.includes(searchTerm)) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });

            // Função para filtrar professores
            document.getElementById('teacher-search').addEventListener('input', function(e) {
                const searchTerm = e.target.value.toLowerCase();
                const cards = document.querySelectorAll('#teachers-list .teacher-card');
                cards.forEach(card => {
                    const teacherName = card.querySelector('p').textContent.toLowerCase();
                    if (teacherName.includes(searchTerm)) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });

            createSubjectCards();
            createTeacherCards();
            createScheduleTable();
            initializeSortable();
            
            $('#turma-select').on('change', function() {
                const selectedTurma = $(this).val();
                if (!selectedTurma) {
                    $('.subject-card').show();
                } else {
                    $('.subject-card').each(function() {
                        const subjectTurmaId = $(this).data('turma-id');
                        if (subjectTurmaId == selectedTurma) {
                            $(this).show();
                        } else {
                            $(this).hide();
                        }
                    });
                }
            });
        });
    </script>
</body>
</html>