<!DOCTYPE html>
<html lang="pt-br">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <title>Calendário Escolar</title>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 20px;
        background-color: #f5f5f5;
      }

      .container {
        max-width: 1600px;
        margin: 0 auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }

      /* Notification Button */
      .notification-button {
        position: fixed;
        top: 20px;
        right: 20px;
        background-color:rgb(255, 255, 255);
        border: none;
        border-radius: 50%;
        width: 44px;
        height: 44px;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        z-index: 1000;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
      }

      .notification-button:hover {
        background-color:rgb(227, 227, 227);
        transform: scale(1.05);
      }

      .notification-icon {
        color: white;
        font-size: 20px;
      }

      .notification-count {
        position: absolute;
        top: -5px;
        right: -5px;
        background-color: #f44336;
        color: white;
        border-radius: 50%;
        width: 22px;
        height: 22px;
        font-size: 12px;
        font-weight: bold;
        display: flex;
        justify-content: center;
        align-items: center;
        border: 2px solid white;
      }

      /* Offcanvas Panel */
      .notification-offcanvas {
        position: fixed;
        top: 0;
        right: -350px;
        width: 350px;
        height: 100%;
        background-color: #fff;
        box-shadow: -2px 0 15px rgba(0,0,0,0.1);
        transition: right 0.3s ease;
        z-index: 1001;
      }

      .notification-offcanvas.open {
        right: 0;
      }

      .offcanvas-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 20px;
        background-color:rgb(174, 210, 175);
        color: white;
      }

      .offcanvas-header h3 {
        margin: 0;
        font-size: 18px;
        font-weight: 500;
      }

      .offcanvas-header button {
        background: none;
        border: none;
        color: white;
        font-size: 24px;
        cursor: pointer;
        padding: 0 8px;
      }

      .notification-list {
        padding: 10px;
        overflow-y: auto;
        height: calc(100% - 60px);
      }

      /* Notification Items */
      .notification-item {
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 8px;
        border-left: 4px solid #4CAF50;
        background-color: #f8f9fa;
        transition: all 0.2s ease;
      }

      .notification-item:hover {
        transform: translateX(5px);
        background-color: #f0f0f0;
      }

      /* Different notification types */
      .notification-item.success {
        border-left-color: #4CAF50;
        background-color: #E8F5E9;
      }

      .notification-item.warning {
        border-left-color: #FFC107;
        background-color: #FFF8E1;
      }

      .notification-item.danger {
        border-left-color: #f44336;
        background-color: #FFEBEE;
      }

      .notification-item.info {
        border-left-color: #2196F3;
        background-color: #E3F2FD;
      }

      /* Popup Notification */
      .notification-popup {
        position: fixed;
        top: 20px;
        right: 70px;
        background-color: #4CAF50;
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 1002;
        display: none;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        animation: slideIn 0.3s ease;
      }

      @keyframes slideIn {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }

      /* Scrollbar styling */
      .notification-list::-webkit-scrollbar {
        width: 8px;
      }

      .notification-list::-webkit-scrollbar-track {
        background: #f1f1f1;
      }

      .notification-list::-webkit-scrollbar-thumb {
        background: #4CAF50;
        border-radius: 4px;
      }

      .notification-list::-webkit-scrollbar-thumb:hover {
        background: #45a049;
      }

      .notification-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        display: none;
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .notification-overlay.open {
        display: block;
        opacity: 1;
      }

      h1 {
        text-align: center;
        color: #333;
        margin-bottom: 20px;
      }

      .schedule-container {
        display: flex;
        margin-top: 20px;
        gap: 20px;
      }

      .subjects-list, .teachers-list {
        width: 200px;
        padding: 15px;
        background-color: #fff;
        border-radius: 8px;
        border: 1px solid #eee;
      }

      .subject-card, .teacher-card {
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 4px;
        cursor: move;
        text-align: center;
      }

      .subject-card p, .teacher-card p {
        margin: 2px 0;
        font-size: 14px;
      }

      .schedule {
        flex-grow: 1;
        border-collapse: collapse;
        background: white;
      }

      .schedule th, .schedule td {
        border: 1px solid #ddd;
        padding: 4px;
        text-align: center;
      }

      .schedule thead {
        background-color: #f8f9fa;
      }

      .schedule th:first-child, .schedule td:first-child {
        background-color: #f8f9fa;
        font-weight: bold;
        width: 120px;
      }

      .schedule td {
        height: 40px !important; /* Garante que a altura seja aplicada */
        padding: 4px !important; /* Reduz espaçamento interno */
        vertical-align: middle;
      }

      .time-slot {
        min-height: 80px;
        border-radius: 4px;
        transition: background-color 0.2s;
        display: flex;
        flex-direction: column;
        gap: 5px;
      }

      .time-slot:empty {
        border: 2px dashed #ddd;
      }

      .time-slot:not(:empty) {
        border: none;
      }

      .select2-container {
        margin-bottom: 20px;
      }

      .search-container {
        margin-bottom: 22px;
        display: flex;
        align-items: center;
        background: #fff;
        border-radius: 8px;
        padding: 5px 10px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
      }

      .search-container input {
        border: none;
        outline: none;
        padding: 8px 12px;
        border-radius: 6px;
        width: 100%;
        font-size: 14px;
      }

      .search-container i {
        margin-right: 8px;
        color: #999;
      }

      .search-container img {
        width: 20px;
        height: 20px;
        margin-right: 8px;
      }

      .info-text {
        font-size: 12px;
        color: #666;
        text-align: center;
        margin-top: 10px;
      }

      .select2-container--default .select2-selection--single {
        border: none !important;
        background: none !important;
      }

      /* Main select container */
      .select2-container .select2-selection--single {
        height: 42px !important;
        border: 2px solid #4CAF50 !important;
        border-radius: 8px !important;
        background-color: white !important;
        padding: 6px 12px !important;
      }

      /* Text input area */
      .select2-container .select2-selection--single .select2-selection__rendered {
        color: #2E7D32 !important;
        line-height: 28px !important;
        padding-left: 0 !important;
      }

      /* Placeholder text */
      .select2-container--default .select2-selection--single .select2-selection__placeholder {
        color: #66BB6A !important;
      }

      /* Dropdown arrow */
      .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: 40px !important;
        right: 8px !important;
      }

      .select2-container--default .select2-selection--single .select2-selection__arrow b {
        border-color: #4CAF50 transparent transparent transparent !important;
        border-width: 6px 4px 0 4px !important;
      }

      /* Dropdown panel */
      .select2-container--default .select2-dropdown {
        border: 2px solid #4CAF50 !important;
        border-radius: 8px !important;
        margin-top: 4px !important;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
      }

      /* Dropdown options */
      .select2-container--default .select2-results__option {
        padding: 8px 12px !important;
      }

      /* Highlighted option */
      .select2-container--default .select2-results__option--highlighted[aria-selected] {
        background-color: #4CAF50 !important;
        color: white !important;
      }

      /* Selected option */
      .select2-container--default .select2-results__option[aria-selected=true] {
        background-color: #E8F5E9 !important;
        color: #2E7D32 !important;
      }

      /* Focus state */
      .select2-container--default.select2-container--focus .select2-selection--single,
      .select2-container--default.select2-container--open .select2-selection--single {
        border-color: #2E7D32 !important;
        box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2) !important;
      }

      /* Search box in dropdown */
      .select2-container--default .select2-search--dropdown .select2-search__field {
        border: 1px solid #4CAF50 !important;
        border-radius: 4px !important;
        padding: 6px !important;
      }

      .select2-container--default .select2-search--dropdown .select2-search__field:focus {
        outline: none !important;
        border-color: #2E7D32 !important;
        box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2) !important;
      }

      @media print {
      /* Hide elements that are not needed in print */
      #printGrade,
      .nav,
      .controls {
        display: none;
      }

      /* Optionally, adjust font sizes or layout for printing */
      body {
        font-size: 12pt;
      }

      #teachers-list,
      #aviso,
      #subjects-list {
        display: none;
      }
          }
    </style>
  </head>
  <body>
    <div id="notification-button" class="notification-button">
      <span class="notification-icon">🔔</span>
      <span id="notification-count" class="notification-count">0</span>
    </div>
    <div id="notification-offcanvas" class="notification-offcanvas">
      <div class="offcanvas-header">
        <h3>Notificações</h3>
        <button id="close-offcanvas">&times;</button>
      </div>
      <div id="notification-list" class="notification-list"></div>
    </div>
    <div id="notification-popup" class="notification-popup"></div>
    <div id="notification-overlay" class="notification-overlay"></div>
    <div class="container">
      <div class="select">
        <select id="turma-select" style="width: 100%; max-width: 250px;"></select>
      </div>
      <div style="background-color:rgb(163, 192, 153); color: #363636; padding: 12px; margin: 15px 0; border: 1px solidrgb(145, 173, 143); border-radius: 4px; text-align: center; font-weight: bold;">
        Dê dois cliques para remover itens do calendário
      </div>
      <button id="printGrade">Print Grade</button>
      <div class="schedule-container">
        <div id="subjects-list" class="subjects-list">
          <h3 style="text-align: center;">Matérias</h3>
          <div class="search-container">
            <input type="text" id="subject-search" placeholder="Pesquisar matéria...">
            <img src="/layout/assets/img/search.png" alt="Lupa">
          </div>
          <!-- <div class="info-text">Dê dois cliques para remover a matéria.</div> -->
        </div>
        <table id="schedule" class="schedule">
          <thead></thead>
          <tbody></tbody>
        </table>
        <div id="teachers-list" class="teachers-list">
          <h3 style="text-align: center;">Professores</h3>
          <div class="search-container">
            <input type="text" id="teacher-search" placeholder="Pesquisar professor...">
            <img src="/layout/assets/img/search.png" alt="Lupa">
          </div>
          <!-- <div class="info-text">Dê dois cliques para remover o professor.</div> -->
        </div>
      </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    <script>
      $(document).ready(function() {
          // Lista de cores claras para matérias e professores
          const lightColors = [
            '#DCEDC8', '#7ca37c', '#49ab81', '#87A96B', '#8FBC8B', '#71BC78',
          ];

          // Função para obter uma cor única com base no índice
          function getColor(index) {
              return lightColors[index % lightColors.length];
          }

          function createTurmaOptions() {
            const turmaSelect = $('#turma-select');
            // Clear any existing options and add the default one.
            turmaSelect.empty();
            turmaSelect.append($('<option>', { value: '', text: 'Selecione uma turma' }));

            // Create an object to store distinct turmas.
            let turmas = {};

            // Loop through subjects to gather distinct turma objects.
            subjects.forEach(subject => {
              // Use the turma_id as key.
              // Assuming each subject has a `turma` object with a `descricao` property.
              const turmaId = subject.turma_id;
              if (!turmas[turmaId]) {
                turmas[turmaId] = subject.turma.descricao;
              }
            });

            // Append an option for each distinct turma.
            for (let id in turmas) {
              turmaSelect.append($('<option>', { value: id, text: turmas[id] }));
            }
          }

          var subjects = JSON.parse('<%= raw(json_escape(@grades_curriculares)) %>');
          console.log(subjects);

          createTurmaOptions();
          $('#turma-select').select2();

          var teachers = JSON.parse('<%= raw(json_escape(@professores)) %>');
          console.log(teachers);

          function createSubjectCards() {
            const subjectsList = document.getElementById('subjects-list');
            subjects.forEach((subject, index) => {
              const maxUses = Math.floor(subject.weeklyminutes / 50);
              const card = document.createElement('div');
              card.className = 'subject-card';
              card.setAttribute('data-id', subject.id);
              card.setAttribute('data-subject', subject.name.toLowerCase().replace(/ /g, '-'));
              card.setAttribute('data-max-uses', maxUses);
              card.setAttribute('data-current-uses', '0');
              card.setAttribute('data-turma-id', subject.turma_id);
              card.setAttribute('data-ambiente-id', subject.room_id);
              card.style.backgroundColor = getColor(index);
              card.innerHTML = `
                <p><strong>${subject.name}</strong></p>
                <p>${subject.room}</p>
                <p>Aula 0/${maxUses}</p>
              `;
              subjectsList.appendChild(card);
            });
          }

          function createTeacherCards() {
            const teachersList = document.getElementById('teachers-list');
            teachers.forEach((teacher, index) => {
              const maxUses = Math.floor(teacher.weeklyminutes / 50);
              const card = document.createElement('div');
              card.className = 'teacher-card';
              card.setAttribute('data-id', teacher.id);
              card.setAttribute('data-teacher', teacher.name.toLowerCase().replace(/ /g, '-'));
              card.setAttribute('data-max-uses', maxUses);
              card.setAttribute('data-current-uses', '0');
              card.style.backgroundColor = getColor(index);
              card.innerHTML = `
                <p><strong>${teacher.name}</strong></p>
                <p>Aula 0/${maxUses}</p>
              `;
              teachersList.appendChild(card);
            });
          }

          function createScheduleTable() {
            const timeSlots = JSON.parse('<%= raw(json_escape(@horarios)) %>');
            const daysOfWeek = JSON.parse('<%= raw(json_escape(@dias)) %>');
            const table = document.getElementById('schedule');

            // Build table header
            const thead = table.querySelector('thead');
            thead.innerHTML = '';
            const headerRow = document.createElement('tr');
            const timeHeaderCell = document.createElement('th');
            timeHeaderCell.textContent = 'Horário';
            headerRow.appendChild(timeHeaderCell);

            const sortedDayKeys = Object.keys(daysOfWeek).sort((a, b) => parseInt(a) - parseInt(b));
            sortedDayKeys.forEach(key => {
              const dayHeaderCell = document.createElement('th');
              dayHeaderCell.textContent = daysOfWeek[key];
              headerRow.appendChild(dayHeaderCell);
            });
            thead.appendChild(headerRow);

            // Build table body
            const tbody = table.querySelector('tbody');
            tbody.innerHTML = '';

            timeSlots.forEach(timeSlot => {
              const row = document.createElement('tr');
              // Create time label cell
              const timeCell = document.createElement('td');
              timeCell.textContent = timeSlot;
              row.appendChild(timeCell);

              // Create a cell for each day
              sortedDayKeys.forEach(key => {
                const cell = document.createElement('td');
                const slotDiv = document.createElement('div');
                slotDiv.className = 'time-slot';
                // Save schedule info
                slotDiv.setAttribute('data-day', key);
                slotDiv.setAttribute('data-horario-inicio', timeSlot);
                slotDiv.setAttribute('data-horario-fim', timeSlot); // adjust if needed

                // Create a unique key for the cell (e.g. "day-time")
                slotDiv.setAttribute('data-cell-key', key + '-' + timeSlot);
                cell.appendChild(slotDiv);
                row.appendChild(cell);
              });
              tbody.appendChild(row);
            });
          }

          var scheduleAssignments = {};

          function checkTeacherConflicts() {
              const selectedTurma = $('#turma-select').val();
              if (!selectedTurma) return;

              const teacherSchedule = {};

              // Iterate through all time slots
              $('.time-slot').each(function() {
                  const cellKey = $(this).data('cell-key');
                  const teacherCard = $(this).find('.teacher-card');
                  if (teacherCard.length) {
                      const teacherId = teacherCard.data('id');
                      const teacherName = teacherCard.find('strong').text();

                      if (!teacherSchedule[teacherId]) {
                          teacherSchedule[teacherId] = [];
                      }

                      // Check for conflicts
                      if (teacherSchedule[teacherId].includes(cellKey)) {
                          showNotification(`Conflito: ${teacherName} está alocado em horários sobrepostos.`);
                      }

                      teacherSchedule[teacherId].push(cellKey);
                  }
              });
          }

          function initializeSortable() {
            document.querySelectorAll('.time-slot').forEach(timeSlot => {
              // If a Sortable instance exists on this element, destroy it.
              new Sortable(document.getElementById('subjects-list'), {
                group: {
                  name: 'subjects',
                  pull: 'clone',
                  put: false
                },
                sort: false,
                animation: 150
              });

              new Sortable(document.getElementById('teachers-list'), {
                group: {
                  name: 'teachers',
                  pull: 'clone',
                  put: false
                },
                sort: false,
                animation: 150
              });

              if (timeSlot._sortableInstance) {
                timeSlot._sortableInstance.destroy();
              }
              // Create a new Sortable instance and store it on the element.
              timeSlot._sortableInstance = new Sortable(timeSlot, {
                group: {
                  name: 'shared',
                  put: function(to, from, item) {
                    const hasSubject = Array.from(to.el.children).some(child =>
                      child !== item && child.classList.contains('subject-card')
                    );
                    const hasTeacher = Array.from(to.el.children).some(child =>
                      child !== item && child.classList.contains('teacher-card')
                    );
                    if (item.classList.contains('subject-card') && hasSubject) return false;
                    if (item.classList.contains('teacher-card') && hasTeacher) return false;
                    return true;
                  }
                },
                animation: 150,
                onAdd: function(evt) {
                  const slotEl = evt.to;
                  // Get the unique cell key.
                  const cellKey = slotEl.getAttribute('data-cell-key');
                  const item = evt.item;

                  if (!evt.from.classList.contains('time-slot')) {
                    const originalId = item.getAttribute('data-id');
                    const maxUses = parseInt(item.getAttribute('data-max-uses'));

                    // Find the original card in the list
                    const originalCard = item.classList.contains('subject-card')
                      ? document.querySelector(`#subjects-list .subject-card[data-id="${originalId}"]`)
                      : document.querySelector(`#teachers-list .teacher-card[data-id="${originalId}"]`);

                    if (originalCard) {
                      const currentUses = parseInt(originalCard.getAttribute('data-current-uses'));
                      if (currentUses >= maxUses) {
                        evt.from.appendChild(item);
                        alert('Limite máximo de alocações atingido para este item!');
                        return;
                      }
                      // Update the count on the original card
                      const newUses = currentUses + 1;
                      originalCard.setAttribute('data-current-uses', newUses);
                      const countText = originalCard.querySelector('p:last-child');
                      countText.textContent = `Aula ${newUses}/${maxUses}`;
                      // Create a clone for the schedule
                      const clone = item.cloneNode(true);
                      clone.setAttribute('data-instance-number', newUses);
                      const cloneCountText = clone.querySelector('p:last-child');
                      cloneCountText.textContent = `Aula ${newUses}/${maxUses}`;
                      evt.to.replaceChild(clone, item);
                      evt.from.appendChild(originalCard);
                      // Hide the original card if max uses reached
                      if (newUses >= maxUses) {
                        originalCard.style.display = 'none';
                      }
                    }
                  }

                  // Get the currently selected turma.
                  const selectedTurma = $('#turma-select').val();
                  if (!selectedTurma) {
                    alert("Por favor, selecione uma turma antes de alocar.");
                    return;
                  }

                  // Ensure there's an entry for this turma in scheduleAssignments.
                  if (!scheduleAssignments[selectedTurma]) {
                    scheduleAssignments[selectedTurma] = {};
                  }
                  // Ensure there's an entry for this cell.
                  if (!scheduleAssignments[selectedTurma][cellKey]) {
                    scheduleAssignments[selectedTurma][cellKey] = {};
                  }

                  // Identify the type of card dropped.
                  if (evt.item.classList.contains('subject-card')) {
                    scheduleAssignments[selectedTurma][cellKey].subject = {
                      id: evt.item.getAttribute('data-id'),
                      html: evt.item.outerHTML
                    };
                  } else if (evt.item.classList.contains('teacher-card')) {
                    scheduleAssignments[selectedTurma][cellKey].teacher = {
                      id: evt.item.getAttribute('data-id'),
                      html: evt.item.outerHTML
                    };
                  }

                  const dia = slotEl.getAttribute('data-day');
                  const horarioInicio = slotEl.getAttribute('data-horario-inicio');
                  const horarioFim = slotEl.getAttribute('data-horario-fim');

                  const teacherCard = slotEl.querySelector('.teacher-card');
                  const subjectCard = slotEl.querySelector('.subject-card');

                  let params = {
                    dia: dia,
                    horario_inicio: horarioInicio,
                    horario_fim: horarioFim,
                  };

                  if (subjectCard) {
                    params.grade_curricular_id = subjectCard.getAttribute('data-id');
                    params.ambiente_id = subjectCard.getAttribute('data-ambiente-id') || null;
                  }
                  if (teacherCard) {
                    params.user_id = teacherCard.getAttribute('data-id');
                  }

                  // Perform your AJAX call.
                  const aulaId = slotEl.getAttribute('data-aula-id');
                  console.log("slot:", slotEl);
                  if (aulaId) {
                    $.ajax({
                      url: `/aulas/${aulaId}`,
                      headers: {'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')},
                      method: 'PATCH',
                      dataType: 'json',
                      data: { aula: params },
                      success: function(response) {
                        console.log('Aula updated:', response);
                        const message = response.message || 'Aula atualizada com sucesso!';
                        showNotification(message, 'success');
                        checkTeacherConflicts();
                      },
                      error: function(error) {
                        let message = 'Erro ao atualizar aula.';

                        if (error.responseJSON) {
                          if (Array.isArray(error.responseJSON)) {
                            // The response is an array of error messages.
                            message = error.responseJSON.join('<br>');
                          } else if (error.responseJSON.errors && Array.isArray(error.responseJSON.errors)) {
                            // The response contains an "errors" array.
                            message = error.responseJSON.errors.join('<br>');
                          } else if (error.responseJSON.message) {
                            // The response contains a single "message".
                            message = error.responseJSON.message;
                          }
                        }
                        showNotification(message, 'error');
                      }
                    });
                  } else {
                    $.ajax({
                      url: '/aulas',
                      headers: {'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')},
                      method: 'POST',
                      dataType: 'json',
                      data: { aula: params },
                      success: function(response) {
                        slotEl.setAttribute('data-aula-id', response.id);
                        const message = response.message || 'Aula criada com sucesso!';
                        showNotification(message, 'success');
                        checkTeacherConflicts();
                      },
                      error: function(error) {
                        let message = 'Erro ao atualizar aula.';

                        if (error.responseJSON) {
                          if (Array.isArray(error.responseJSON)) {
                            // The response is an array of error messages.
                            message = error.responseJSON.join('<br>');
                          } else if (error.responseJSON.errors && Array.isArray(error.responseJSON.errors)) {
                            // The response contains an "errors" array.
                            message = error.responseJSON.errors.join('<br>');
                          } else if (error.responseJSON.message) {
                            // The response contains a single "message".
                            message = error.responseJSON.message;
                          }
                        }
                        showNotification(message, 'error');
                      }
                    });
                  }
                }
              });
            });
          }

          // Delegated event listener for double-clicking on dropped cards
          $(document).on('dblclick', '.time-slot', function(e) {
            // Check if the target (or one of its parents) is a teacher or subject card.
            const $card = $(e.target).closest('.subject-card, .teacher-card');
            if (!$card.length) return; // Not a card: ignore the event.

            e.preventDefault();

            const $timeSlot = $(this);
            const aulaId = $timeSlot.data('aula-id');

            // If there's no schedule assignment, just remove the card.
            if (!aulaId) {
              $card.remove();
              return;
            }

            // Optionally, ask for confirmation before deleting:
            if (!confirm("Deseja remover essa alocação?")) {
              return;
            }

            // Perform the AJAX DELETE call. Make sure your routes include:
            // resources :aulas, only: [:create, :update, :destroy]
            $.ajax({
              url: `/aulas/${aulaId}`,
              headers: { 'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') },
              method: 'DELETE',
              dataType: 'json',
              success: function(response) {
                console.log('Aula deleted:', response);
                // Remove the schedule assignment from the UI:
                $timeSlot.removeAttr('data-aula-id').empty();
                showNotification('Aula removida com sucesso!');
              },
              error: function(error) {
                let message = 'Erro ao atualizar aula.';
                if (error.responseJSON) {
                  if (Array.isArray(error.responseJSON)) {
                    // The response is an array of error messages.
                    message = error.responseJSON.join('<br>');
                  } else if (error.responseJSON.errors && Array.isArray(error.responseJSON.errors)) {
                    // The response contains an "errors" array.
                    message = error.responseJSON.errors.join('<br>');
                  } else if (error.responseJSON.message) {
                    // The response contains a single "message".
                    message = error.responseJSON.message;
                  }
                }
                showNotification(message, 'error');
              }
            });
          });

          // Função para filtrar matérias
          document.getElementById('subject-search').addEventListener('input', function(e) {
              const searchTerm = e.target.value.toLowerCase();
              const cards = document.querySelectorAll('#subjects-list .subject-card');
              cards.forEach(card => {
                  const subjectName = card.querySelector('p').textContent.toLowerCase();
                  if (subjectName.includes(searchTerm)) {
                      card.style.display = 'block';
                  } else {
                      card.style.display = 'none';
                  }
              });
          });

          // Função para filtrar professores
          document.getElementById('teacher-search').addEventListener('input', function(e) {
              const searchTerm = e.target.value.toLowerCase();
              const cards = document.querySelectorAll('#teachers-list .teacher-card');
              cards.forEach(card => {
                  const teacherName = card.querySelector('p').textContent.toLowerCase();
                  if (teacherName.includes(searchTerm)) {
                      card.style.display = 'block';
                  } else {
                      card.style.display = 'none';
                  }
              });
          });

          createSubjectCards();
          createTeacherCards();
          createScheduleTable();
          initializeSortable();

          $('#turma-select').on('change', function() {
            const selectedTurma = $(this).val();

            // Filter subject cards.
            if (selectedTurma) {
              $('.subject-card').each(function() {
                const subjectTurma = $(this).data('turma-id');
                if (subjectTurma == selectedTurma) {
                  $(this).show();
                } else {
                  $(this).hide();
                }
              });
            } else {
              $('.subject-card').show();
            }

            // Clear all time-slot containers.
            $('.time-slot').each(function() {
              $(this).empty();
            });

            // Re-populate the schedule for the selected turma.
            if (scheduleAssignments[selectedTurma]) {
              for (const cellKey in scheduleAssignments[selectedTurma]) {
                const cellEl = document.querySelector(`.time-slot[data-cell-key="${cellKey}"]`);
                if (cellEl) {
                  const cellData = scheduleAssignments[selectedTurma][cellKey];
                  if (cellData.subject) {
                    cellEl.insertAdjacentHTML('beforeend', cellData.subject.html);
                  }
                  if (cellData.teacher) {
                    cellEl.insertAdjacentHTML('beforeend', cellData.teacher.html);
                  }
                }
              }
            }
            // Reinitialize Sortable on the updated cells.
            initializeSortable();

            // Check for conflicts after populating the schedule
            checkTeacherConflicts();
          });

          let notificationCount = 0;
          const notificationButton = document.getElementById('notification-button');
          const notificationOffcanvas = document.getElementById('notification-offcanvas');
          const notificationList = document.getElementById('notification-list');
          const notificationPopup = document.getElementById('notification-popup');
          const closeOffcanvasButton = document.getElementById('close-offcanvas');
          const notificationOverlay = document.createElement('div');

          // Criar e adicionar o overlay
          notificationOverlay.className = 'notification-overlay';
          document.body.appendChild(notificationOverlay);

          // Abrir offcanvas e overlay
          notificationButton.addEventListener('click', () => {
            notificationOffcanvas.classList.add('open');
            notificationOverlay.classList.add('open');
          });

          // Fechar ao clicar no overlay
          notificationOverlay.addEventListener('click', () => {
            notificationOffcanvas.classList.remove('open');
            notificationOverlay.classList.remove('open');
          });

          // Manter o botão de fechar funcionando
          closeOffcanvasButton.addEventListener('click', () => {
            notificationOffcanvas.classList.remove('open');
            notificationOverlay.classList.remove('open');
          });

          function showNotification(message, type = 'success') {
            // Atualiza o contador de notificações
            notificationCount++;
            document.getElementById('notification-count').textContent = notificationCount;

            // Adiciona à lista de notificações
            const notificationItem = document.createElement('div');
            notificationItem.className = `notification-item ${type}`;
            notificationItem.textContent = message;
            notificationList.prepend(notificationItem);

            // Mostra o popup
            notificationPopup.innerHTML = message;
            notificationPopup.className = `notification-popup ${type}`;
            notificationPopup.style.display = 'block';

            // Adiciona animação de entrada
            notificationPopup.style.animation = 'slideIn 0.3s ease';

            setTimeout(() => {
              notificationPopup.style.display = 'none';
            }, 3000);
          }
      });
    </script>
  </body>
</html>